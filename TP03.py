# 1 algorithme d'exponentiation binaire / rapide
# 1.1 - Programmer la fonction d'exponentiation binaire.

def binary_exponentiation(a, b, n):
    b_binary = bin(b)[2:]
    result = 1
    # pour i de m à 0 faire
    for i in range(len(b_binary)):
        # result = result2 modulo n
        result = (result * result) % n
        # si bi = 1 alors result = result * a modulo n
        if b_binary[i] == '1':
            result = (result * a) % n
    return result

print(f"Clé déchiffrée : {binary_exponentiation(2, 11, 20)}")

# 1.2 - Retrouver les résultats avec la fonction pow.
print('vérification : pow(2, 11, 20) =', pow(2, 11, 20))

# 1.3 Bonus. Compléter votre programme pour afficher le nombre de multiplications effectuées.

#2 - Calculs
# On veut calculer 42 puissance 12345678 (mod 99)
#2.1 - Effectuer le calcul en utilisant les opérateurs Python ** et %.

#print(f"42**12345678 % 99 =", 42**12345678 % 99)

#2.2 - Effectuer le calcul en utilisant la fonction binary_exponentiation.
print(f"Exercice 2 avec la fonction créée : {binary_exponentiation(42, 12345678, 99)}")

#2.3 - Effectuer le calcul avec la fonction pow.
print('Exercice 2 avec pow :', pow(42, 12345678, 99))

#2.4 - Que remarque-t-on ?
# La méthode qui utilise les opérateurs Python ** et % est beaucoup plus lente que les deux autres méthodes.

#3 - Chiffrement RSA

# c = nombre chiffré
# d = clé privée
# N = produit de deux nombres premiers - clé publique
# e = exposant
N = 19830795139318325941487671253815624472502849984998302696097482333817644137763489591807575783177362205661306646291963346041402116485607931985769341167566611671391141850391617556065088218323416415890729764220603990631859998529241044140060212580449630636172986185232033460062229704404966009203444212267631901886406066603538972973449273665045266652979966248219948581482739687524039910047822114902441573168611350789489540373039061808309376489951445952407668550762996975529010015316803012832435902169793374889354970378231421673904851245794306549997880026030696439302098974910837987470854116847249789644110545093908793595177
e = 65537
d = 5403034591263988708839340493280616912293984914355702777690718900051083414314125915914919407119870905660745708167741848221848363397272002586903540837817864992360959898692230695349164826378731457377433673648825928204258543017503518381447352729549851299868850287982409775590447740999055084308660754295296324825343733858516730917308555915025845895909679771918300828776085752046669200403924032056072417190995123079855233229238239639092826614066930734064448996175615824269748616779370254486324192857756768745168700313086712911466229952991951511334806554075770753504755355564315539007113614535381475487350046236504808260353
c = 17923704959459477984072377933676308945783709670388251108227755427603642367899735946045146165127192271617962936207045285472293920298855561559514333231384182785186803574120793651176261270629048336030053163175160430372745788647095221127169302249855068767966461519976818882438249531046607436761958820063127913904197977309445029687361161014058195814794708980332869548019804180693730255503613419462110134303813375716143491658168347160150763284949958542812913235303850839494860367624116484070775902286513190355660489256420838801419981921771271301467289825955677355279006002160055690492959839406289004484538121376260081714581

def ras_decrypt(c, d, N):
    return binary_exponentiation(c, d, N)

decrypted_key = ras_decrypt(c, d, N)
print(f"Exercice 3 clé déchiffrée : {decrypted_key}")

from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

message = b'\x14M,C\xd7\x82(\xa1q\xe6\xf5j\xc3\x07C\xa4'

def aes_ecb_decrypt(ciphertext, key):
    key_to_bytes = key.to_bytes(16, byteorder='big')
    cipher = AES.new(key_to_bytes, AES.MODE_ECB)
    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
    result = plaintext.decode('utf-8')
    return result

print(f"Exercice 3 résultat: {aes_ecb_decrypt(message, decrypted_key)}")


# 4 - Résoudre le challenge SMIC(1) sur hackropole

m = 29092715682136811148741896992216382887663205723233009270907036164616385404410946789697601633832261873953783070225717396137755866976801871184236363551686364362312702985660271388900637527644505521559662128091418418029535347788018938016105431888876506254626085450904980887492319714444847439547681555866496873380
n = 115835143529011985466946897371659768942707075251385995517214050122410566973563965811168663559614636580713282451012293945169200873869218782362296940822448735543079113463384249819134147369806470560382457164633045830912243978622870542174381898756721599280783431283777436949655777218920351233463535926738440504017
e = 65537

print(pow(m, e, n))

# le flag est = FCSC{43038584369552603099759673610132404954603129182365447300530480398332322363741719021427218282885888340427764617212360258625034642827465292074914623418386094167402748099928035759712951543068670333972608099203444196434250100760907677561414593941829935308834430903916897564884969367373487895789351212840634163159}

